package array;

/**
 * 优美的排列2
 * 给定两个整数 n 和 k，你需要实现一个数组，这个数组包含从 1 到 n 的 n 个不同整数，同时满足以下条件：
 * ① 如果这个数组是 [a1, a2, a3, ... , an] ，那么数组 [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] 中应该有且仅有 k 个不同整数；.
 * ② 如果存在多种答案，你只需实现并返回其中任意一种.
 * 示例 1:
 * 输入: n = 3, k = 1
 * 输出: [1, 2, 3]
 * 解释: [1, 2, 3] 包含 3 个范围在 1-3 的不同整数， 并且 [1, 1] 中有且仅有 1 个不同整数 : 1
 * 示例 2:
 * 输入: n = 3, k = 2
 * 输出: [1, 3, 2]
 * 解释: [1, 3, 2] 包含 3 个范围在 1-3 的不同整数， 并且 [2, 1] 中有且仅有 2 个不同整数: 1 和 2
 * 提示:
 *  n 和 k 满足条件 1 <= k < n <= 104.
 */
public class A0667 {
    // 长度为n的数组中值为1-n, 每前后两项差值只能为k种
    // 初始化1,2,3,4,..,n, 有一种差值1        k = 1, 不翻转
    // 翻转2-n, 1,n,n-1,..,4,3,2, 有两种差值n-1, 1        k = 2, 从1开始翻转一次
    // 翻转2-n之后翻转3-n 1,n,2,3,..,n-1, 有三种差值n-1,n-2,1        k = 3, 从1开始翻转一次再从2开始翻转一次
    // 翻转3-n之后翻转4-n 1,n,2,n-1,n-2,..,5,4,3, 有四种n-1, n-2, n-3, 1
    public static int[] constructArray(int n, int k) {
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = i + 1;
        }
        for (int i = 1; i < k; i++) {
            reverse(nums, i, n-1);
        }
        return nums;
    }
    public static void reverse(int[] nums, int l, int r) {
        while (l < r) {
            int temp = nums[l];
            nums[l] = nums[r];
            nums[r] = temp;
            l++;
            r--;
        }
    }
}
